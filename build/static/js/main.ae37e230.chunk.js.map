{"version":3,"sources":["logowt80.svg","Components/connectWalletPage.js","constants/chains.js","constants/coins.js","ethereumFunctions.js","network.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","maxWidth","margin","marginTop","textAlign","fullWidth","width","title","marginBottom","hr","balance","overflow","buttonIcon","marginRight","footer","ConnectWalletPage","classes","src","logo","alt","Container","Paper","className","Typography","variant","font-size","Grid","container","direction","justifyContent","alignItems","networks","ChainId","routerAddress","Map","set","COINS","chains","name","abbr","address","ROUTER","require","ERC20","FACTORY","PAIR","getNetwork","provider","a","network","chainId","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","window","ethereum","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","ethers","utils","formatEther","symbol","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","createTheme","palette","primary","main","contrastText","secondary","Web3Provider","props","useState","isConnected","setConnected","Object","create","useRef","account","chainID","router","weth","backgroundListener","setupConnection","providers","getSigner","includes","get","factory_address","createListener","setInterval","useEffect","current","clearInterval","listener","render","NavBar","state","clicked","id","Image","to","href","Component","minHeight","backgroundColor","COLORS","borderColor","borderWidth","borderStyle","container_input","marginLeft","container_blank","grid","height","fab","zIndex","input","typography","h5","inputBase","RemoveLiquidityField1","onClick","onChange","activeField","item","xs","Fab","size","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","styles","dialogContainer","color","titleSection","titleText","alignSelf","paddingLeft","paddingRight","coinList","overflowY","coinContainer","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","setAddress","setError","exit","Dialog","undefined","paper","TextField","e","target","helperText","map","coin","index","Button","autoFocus","err","doesTokenExist","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","switchButton","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","data","isNaN","getAmountOut","toFixed","coinTimeout","setTimeout","clearTimeout","class","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","message","autoHideDuration","SwitchButton","setDeploy","changeStyles","K","add_button","document","getElementById","style","remove_button","ButtonGroup","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","Getliquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","values","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","formatReserve","reserve","NaN","quoteAddLiquidity","networksigner","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ae37e230.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logowt80.4105669f.svg\";","import React from \"react\";\r\nimport logo from '../logowt80.svg';\r\nimport {\r\n  AppBar,\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport \"./cw.css\"\r\nimport { grey } from '@mui/material/colors';\r\n\r\n\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 400,\r\n    margin: \"auto\",\r\n    marginTop: \"200px\",\r\n    textAlign:\"CenterFocusStrong\"\r\n     },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  \r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction ConnectWalletPage() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div >  <img src={logo} alt=\"Logo\" />\r\n     \r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography\r\n          \r\n            variant=\"body1\"\r\n            \r\n            className={classes.title}\r\n            \r\n          >\r\n            <h3> Connect to MetaMask To Use Shardex&nbsp; </h3>\r\n\r\n\r\n\r\n          </Typography>\r\n          <Typography \r\n          font-size='2rem'\r\n          \r\n          \r\n          ><h9>Make Sure You Are Conected to Shardeum Liberty</h9>\r\n          &nbsp;</Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n         </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConnectWalletPage;\r\n","export const networks = [8080, 4];\r\n\r\nexport const ChainId = {\r\n  MAINNET: 8080,\r\n\r\n  RINKEBY: 4,\r\n};\r\n\r\nexport const routerAddress = new Map();\r\nrouterAddress.set(\r\n  ChainId.MAINNET,\r\n  \"0xe14b41d23853c97eb9ebb6c829800ff1b11de7f8\"\r\n);\r\n\r\nrouterAddress.set(\r\n  ChainId.RINKEBY,\r\n  \"0x14e4DAe87990FC8947718f7ac0317CdD9b58CD08\"\r\n);\r\n","import * as chains from \"./chains\";\r\n\r\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\r\nconst MAINNETCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n\r\n    address: \"0xc77c720478a59a2ba135d53f3ab861c1b16efaf3\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\r\n  },\r\n  {\r\n    name: \"WazirX\",\r\n    abbr: \"WRX\",\r\n    address: \"0x6ecbd6f128d1e759169fd19778ed89494024598b\",\r\n  },\r\n];\r\n\r\nconst RINKEBYCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"tst\",\r\n    address: \"0x6D920798b601Df95B2870b7aE29F7D5082CCD1f3\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\",\r\n  },\r\n];\r\n\r\nconst COINS = new Map();\r\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\r\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\r\nexport default COINS;\r\n","import { Contract, ethers } from \"ethers\";\r\nimport * as chains from \"./constants/chains\";\r\nimport COINS from \"./constants/coins\";\r\n\r\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\r\nconst ERC20 = require(\"./build/ERC20.json\");\r\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\r\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\r\n\r\nexport function getProvider() {\r\n  return new ethers.providers.Web3Provider(window.ethereum);\r\n}\r\n\r\nexport function getSigner(provider) {\r\n  return provider.getSigner();\r\n}\r\n\r\nexport async function getNetwork(provider) {\r\n  const network = await provider.getNetwork();\r\n  return network.chainId;\r\n}\r\n\r\nexport function getRouter(address, signer) {\r\n  return new Contract(address, ROUTER.abi, signer);\r\n}\r\n\r\nexport async function checkNetwork(provider) {\r\n  const chainId = getNetwork(provider);\r\n  if (chains.networks.includes(chainId)){\r\n    return true\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getWeth(address, signer) {\r\n  return new Contract(address, ERC20.abi, signer);\r\n}\r\n\r\nexport function getFactory(address, signer) {\r\n  return new Contract(address, FACTORY.abi, signer);\r\n}\r\n\r\nexport async function getAccount() {\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n\r\n  return accounts[0];\r\n}\r\n\r\n//This function checks if a ERC20 token exists for a given address\r\n//    `address` - The Ethereum address to be checked\r\n//    `signer` - The current signer\r\nexport function doesTokenExist(address, signer) {\r\n  try {\r\n    return new Contract(address, ERC20.abi, signer);\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getDecimals(token) {\r\n  const decimals = await token.decimals().then((result) => {\r\n      return result;\r\n    }).catch((error) => {\r\n      console.log('No tokenDecimals function for this token, set to 0');\r\n      return 0;\r\n    });\r\n    return decimals;\r\n}\r\n\r\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\r\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function getBalanceAndSymbol(\r\n  accountAddress,\r\n  address,\r\n  provider,\r\n  signer,\r\n  weth_address,\r\n  coins\r\n) {\r\n  try {\r\n    if (address === weth_address) {\r\n      const balanceRaw = await provider.getBalance(accountAddress);\r\n\r\n      return {\r\n        balance: ethers.utils.formatEther(balanceRaw),\r\n        symbol: coins[0].abbr,\r\n      };\r\n    } else {\r\n      const token = new Contract(address, ERC20.abi, signer);\r\n      const tokenDecimals = await getDecimals(token);\r\n      const balanceRaw = await token.balanceOf(accountAddress);\r\n      const symbol = await token.symbol();\r\n\r\n      return {\r\n        balance: balanceRaw*10**(-tokenDecimals),\r\n        symbol: symbol,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.log ('The getBalanceAndSymbol function had an error!');\r\n    console.log (error)\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\r\n// No error handling is done, so any issues can be caught with the use of .catch()\r\n// To work correctly, there needs to be 7 arguments:\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `amount` - A float or similar number representing the value of address1's token to trade\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `signer` - The current signer\r\nexport async function swapTokens(\r\n  address1,\r\n  address2,\r\n  amount,\r\n  routerContract,\r\n  accountAddress,\r\n  signer\r\n) {\r\n  const tokens = [address1, address2];\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const tokenDecimals = await getDecimals(token1);\r\n  \r\n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\r\n  const amountOut = await routerContract.callStatic.getAmountsOut(\r\n    amountIn,\r\n    tokens\r\n  );\r\n\r\n  await token1.approve(routerContract.address, amountIn);\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth -> Token\r\n    await routerContract.swapExactETHForTokens(\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline,\r\n      { value: amountIn }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token -> Eth\r\n    await routerContract.swapExactTokensForETH(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  } else {\r\n    await routerContract.swapExactTokensForTokens(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n//This function returns the conversion rate between two token addresses\r\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\r\n//    `amountIn` - Amount of the token at address 1 to be swaped from\r\n//    `routerContract` - The router contract to carry out this swap\r\nexport async function getAmountOut(\r\n  address1,\r\n  address2,\r\n  amountIn,\r\n  routerContract,\r\n  signer\r\n) {\r\n  try {\r\n    const token1 = new Contract(address1, ERC20.abi, signer);\r\n    const token1Decimals = await getDecimals(token1);\r\n\r\n    const token2 = new Contract(address2, ERC20.abi, signer);\r\n    const token2Decimals = await getDecimals(token2);\r\n\r\n    const values_out = await routerContract.getAmountsOut(\r\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\r\n      [address1, address2]\r\n    );\r\n    const amount_out = values_out[1]*10**(-token2Decimals);\r\n    console.log('amount out: ', amount_out)\r\n    return Number(amount_out);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\r\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\r\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\r\n//    `pair` - The pair contract for the two tokens\r\nexport async function fetchReserves(address1, address2, pair, signer) {\r\n  try {\r\n\r\n    // Get decimals for each coin\r\n    const coin1 = new Contract(address1, ERC20.abi, signer);\r\n    const coin2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n    const coin1Decimals = await getDecimals(coin1);\r\n    const coin2Decimals = await getDecimals(coin2);\r\n\r\n    // Get reserves\r\n    const reservesRaw = await pair.getReserves();\r\n\r\n    // Put the results in the right order\r\n    const results =  [\r\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\r\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\r\n    ];\r\n\r\n    // Scale each to the right decimal place\r\n    return [\r\n      (results[0]*10**(-coin1Decimals)),\r\n      (results[1]*10**(-coin2Decimals))\r\n    ]\r\n  } catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0];\r\n  }\r\n}\r\n\r\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\nexport async function getReserves(\r\n  address1,\r\n  address2,\r\n  factory,\r\n  signer,\r\n  accountAddress\r\n) {\r\n  try {\r\n    const pairAddress = await factory.getPair(address1, address2);\r\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n  \r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n  \r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\r\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\r\n      const liquidityTokens = Number(\r\n        ethers.utils.formatEther(liquidityTokens_BN)\r\n      );\r\n    \r\n      return [\r\n        reservesRaw[0].toPrecision(6),\r\n        reservesRaw[1].toPrecision(6),\r\n        liquidityTokens,\r\n      ];\r\n    } else {\r\n      console.log(\"no reserves yet\");\r\n      return [0,0,0];\r\n    }\r\n  }catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0, 0];\r\n  }\r\n}\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport { Contract, ethers } from \"ethers\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getRouter,\r\n  getNetwork,\r\n  getWeth,\r\n} from \"./ethereumFunctions\";\r\nimport COINS from \"./constants/coins\";\r\nimport * as chains from \"./constants/chains\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ff0000\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    secondary: {\r\n      main: \"#9e9e9e\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\nconst autoReconnectDelay = 100;\r\n\r\nconst Web3Provider = (props) => {\r\n  const [isConnected, setConnected] = useState(true);\r\n  let network = Object.create( {} )\r\n  network.provider = useRef(null);\r\n  network.signer = useRef(null);\r\n  network.account = useRef(null);\r\n  network.coins = [];\r\n  network.chainID = useRef(null);\r\n  network.router = useRef(null);\r\n  network.factory = useRef(null);\r\n  network.weth = useRef(null);\r\n  const backgroundListener = useRef(null);\r\n  async function setupConnection() {\r\n    try {\r\n      console.log('lets go!');\r\n      network.provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      network.signer = await network.provider.getSigner();\r\n      await getAccount().then(async (result) => {\r\n        network.account = result;\r\n      });\r\n\r\n      await getNetwork(network.provider).then(async (chainId) => {\r\n        // Set chainID\r\n        network.chainID = chainId;\r\n        if (chains.networks.includes(chainId)) {\r\n          // Get the router using the chainID\r\n          network.router =  getRouter(\r\n            chains.routerAddress.get(chainId),\r\n            network.signer\r\n          );\r\n          // Get default coins for network\r\n          network.coins = COINS.get(chainId);\r\n          // Get Weth address from router\r\n          await network.router.WETH().then((wethAddress) => {\r\n            network.weth = getWeth(wethAddress, network.signer);\r\n            // Set the value of the weth address in the default coins array\r\n            network.coins[0].address = wethAddress;\r\n          });\r\n          // Get the factory address from the router\r\n          await network.router.factory().then((factory_address) => {\r\n            network.factory = getFactory(\r\n              factory_address,\r\n              network.signer\r\n            );\r\n          });\r\n          setConnected(true);\r\n        } else {\r\n          console.log(\"Wrong network mate.\");\r\n          setConnected(false);\r\n        }\r\n      });\r\n\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async function createListener() {\r\n    return setInterval(async () => {\r\n      // console.log(\"Heartbeat\");\r\n      try {\r\n        // Check the account has not changed\r\n        const account = await getAccount();\r\n        if (account != network.account) {\r\n          await setupConnection();\r\n        }\r\n        // const chainID = await getNetwork(network.provider);\r\n        // if (chainID !== network.chainID){\r\n        //   setConnected(false);\r\n        //   await setupConnection();\r\n        // }\r\n      } catch (e) {\r\n        setConnected(false);\r\n        await setupConnection();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  useEffect(async () => {\r\n    // Initial setup\r\n    console.log(\"Initial hook\");\r\n    await setupConnection();\r\n    console.log(\"network: \", network);\r\n\r\n    // Start background listener\r\n    if (backgroundListener.current != null) {\r\n      clearInterval(backgroundListener.current);\r\n    }\r\n    const listener = createListener();\r\n    backgroundListener.current = listener;\r\n    return () => clearInterval(backgroundListener.current);\r\n  }, []);\r\n\r\n  const renderNotConnected = () => {\r\n    console.log(\"Rendering\");\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <ConnectWalletPage />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isConnected && renderNotConnected()}\r\n      {isConnected && <div> {props.render(network)}</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Web3Provider;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MenuItems } from \"./MenuItems\";\r\nimport \"./NavBar.css\";\r\nimport  Image  from \"../logowt80.svg\";\r\nclass NavBar extends Component {\r\n  state = { clicked: false };\r\n\r\n  render() {\r\n    return (\r\n      <nav id=\"navbar\" >\r\n        <img src={Image} alt='logo'/>\r\n        \r\n        <div className=\"NavbarItes\">\r\n          <ul className={`nav-menu`}>\r\n           \r\n            <li> <Link to={'/'} >Swap</Link> </li>\r\n            <li> <Link to={'/Liquidity'} >Pool</Link> </li>\r\n          </ul><span id=\"bspan\"><span id=\"s1\"><a href=\"/\">Exchange</a></span> <span id=\"s2\"><a>History</a></span> <span id=\"s3\"><a>Farms</a></span> </span>\r\n        </div>\r\n      </nav> \r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\nimport './cf.css';\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    padding: theme.spacing(1),\r\n    width:\"100%\",\r\n    minHeight: \"60px\",\r\n    backgroundColor: COLORS.grey[700],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.grey[300],\r\n    borderWidth: \"2px\",\r\n    borderStyle: \"solid\",\r\n  },\r\n  container_input: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"60px\",\r\n    backgroundColor: COLORS.grey[200],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.grey[900],\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\",\r\n    marginLeft: \"50%\",\r\n    textAlign: \"right\",\r\n  },\r\n  container_blank: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"80px\",\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  grid: {\r\n    height: \"40px\",\r\n  },\r\n  fab: {\r\n    zIndex: \"0\",\r\n    \r\n    \r\n  },\r\n  input: {\r\n    ...theme.typography.h5,\r\n    width: \"100%\",\r\n  },\r\n  inputBase: {\r\n    textAlign: \"right\",\r\n  },\r\n}));\r\n\r\nCoinField.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  symbol: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  activeField: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport function RemoveLiquidityField1(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField } = props;\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid \r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab id=\"selectbutton\"\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"0.0\"\r\n            disabled={!activeField}\r\n            classes={{\r\n              root: classes.container_input,\r\n              input: classes.inputBase,\r\n            }} \r\n            \r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function RemoveLiquidityField2(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol } = props;\r\n\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function CoinField(props) {\r\n  // This component is used to selecting a token and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField } = props;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase \r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"0.0\"\r\n            disabled={!activeField}\r\n            classes={{ root: classes.input, input: classes.inputBase }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\nimport '../font.css'\r\nimport './coinbutton.css'\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    width: \"100%\",\r\n    paddingTop: theme.spacing(0.5),\r\n    paddingBottom: theme.spacing(0.5),\r\n   \r\n  },\r\n  coinName: {\r\n    opacity: 0.6,\r\n  },\r\n}));\r\n\r\nCoinButton.propTypes = {\r\n  coinName: PropTypes.string.isRequired,\r\n  coinAbbr: PropTypes.string.isRequired,\r\n \r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function CoinButton(props) {\r\n  const { coinName, coinAbbr, onClick, ...other } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ButtonBase id=\"button\" focusRipple className={classes.button} onClick={onClick}>\r\n      <Grid container direction=\"column\">\r\n        <p>{coinAbbr}</p>\r\n        <Typography variant=\"body2\" className={classes.coinName}>\r\n          <p>{coinName}</p>\r\n        </Typography>\r\n      </Grid>\r\n    </ButtonBase>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CoinButton from \"./CoinButton\";\r\nimport { doesTokenExist } from \"../ethereumFunctions\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\nimport '../CoinSwapper/dialog.css';\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    color:COLORS.grey[900],\r\n  },\r\n  titleSection: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  titleText: {\r\n    alignSelf: \"center\",\r\n  },\r\n  hr: {\r\n    margin: 0,\r\n  },\r\n  address: {\r\n    paddingLeft: theme.spacing(2.5),\r\n    paddingRight: theme.spacing(2.5),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  coinList: {\r\n    height: \"300px\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  coinContainer: {\r\n    paddingLeft: theme.spacing(0.5),\r\n    paddingRight: theme.spacing(0.5),\r\n    paddingTop: theme.spacing(2),\r\n    marginTop: theme.spacing(0),\r\n    overflow: \"hidden\",\r\n    borderRadius:\"2rem\",\r\n    \r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle\r\n      disableTypography\r\n      className={classes.titleSection}\r\n      {...other}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignContent=\"center\"\r\n      >\r\n        <Typography variant=\"h6\" className={classes.titleText}>\r\n          {children}\r\n        </Typography>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </Grid>\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n    backgroundColor: COLORS.grey[100],\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nCoinDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  coins: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function CoinDialog(props) {\r\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\r\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\r\n  // addresses will first be validated to make sure they exist.\r\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\r\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\r\n\r\n  const classes = useStyles();\r\n  const { onClose, open, coins, signer, ...others } = props;\r\n\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n\r\n  // Called when the user tries to input a custom address, this function will validate the address and will either\r\n  // then close the dialog and return the validated address, or will display an error.\r\n  const submit = () => {\r\n    if (doesTokenExist(address, signer)) {\r\n      exit(address);\r\n    } else {\r\n      setError(\"This address is not valid\");\r\n    }\r\n  };\r\n\r\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\r\n  const exit = (value) => {\r\n    setError(\"\");\r\n    setAddress(\"\");\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog id=\"dbody\"\r\n      open={open}\r\n      onClose={() => exit(undefined)}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <DialogTitle onClose={() => exit(undefined)}><p id='Select'>Select Coin</p></DialogTitle>\r\n\r\n      \r\n\r\n      <div id=\"coincontainer\" >\r\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\r\n          <TextField id=\"textfield\"\r\n            value={address}\r\n            onChange={(e) => setAddress(e.target.value)}\r\n            variant=\"outlined\"\r\n            placeholder=\"Token Not in List? Paste the Smart Contract Here!\"\r\n            error={error !== \"\"}\r\n            helperText={error}\r\n            fullWidth\r\n            className={classes.address}\r\n          />\r\n\r\n\r\n          <Grid item className={classes.coinList}>\r\n            <Grid container direction=\"column\">\r\n              {/* Maps all of the tokens in the constants file to buttons */}\r\n              {coins.map((coin, index) => (\r\n                <Grid item key={index} xs={12}>\r\n                  <CoinButton id=\"coins\"\r\n                    coinName={coin.name}\r\n                    coinAbbr={coin.abbr}\r\n                    onClick={() => exit(coin.address)}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <DialogActions id='importbdialog'>\r\n        <Button  id='importb'autoFocus   onClick={submit} color=\"primary\">\r\n          Import Coin \r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport './loadingb.css';\r\nconst useStyles = makeStyles((theme) => ({\r\n  wrapper: {\r\n    margin: 10,\r\n    position: \"relative\",\r\n   \r\n  },\r\n  progress: {\r\n    color: green[500],\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n}));\r\n\r\nexport default function LoadingButton(props) {\r\n  const classes = useStyles();\r\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\r\n  return (\r\n    <div id=\"bwrapper\" className={classes.wrapper}>\r\n      <Button id='lb'\r\n      \r\n        \r\n        fullWidth\r\n        disabled={loading || !valid}\r\n        type=\"submit\"\r\n        onClick={onClick}\r\n        {...other}\r\n      >\r\n        {children}\r\n      </Button>\r\n      {loading && <CircularProgress size={24} className={classes.progress} />}\r\n    {success && <Button variant=\"contained\" color=\"success\">\r\n  Success </Button>}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Dialog,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function WrongNetwork(props) {\r\n\r\n  const classes = useStyles();\r\n  const {open} = props;\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getNetwork,\r\n  getAmountOut,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  swapTokens,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\nimport './swapper.css';\r\n/*import { Colors } from \"react-native/Libraries/NewAppScreen\";\r\n*/\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    color:COLORS.grey[900],\r\n    margin:\"10PX\",\r\n     marginTop: \"40px\",\r\n    borderRadius: theme.spacing(5),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n    \r\n  },\r\n  switchButton: {\r\n    zIndex: 1,\r\n    margin: \"-16px\",\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    marginTop: \"285px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(field2Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n \r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(3) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      !isNaN(parsedInput1) &&\r\n      !isNaN(parsedInput2) &&\r\n      0 < parsedInput1 &&\r\n      parsedInput1 <= coin1.balance\r\n    );\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\r\n  const swap = () => {\r\n    console.log(\"Attempting to swap tokens...\");\r\n    setLoading(true);\r\n\r\n    swapTokens(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n  // of the two coins change.\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address) {\r\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\r\n        (data) => setReserves(data)\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n  // It attempts to calculate and set the state variable `field2Value`\r\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n  // the value in the output box will change.\r\n  useEffect(() => {\r\n    if (isNaN(parseFloat(field1Value))) {\r\n      setField2Value(\"\");\r\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\r\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\r\n        (amount) => setField2Value(amount.toFixed(7))\r\n      ).catch(e => {\r\n        console.log(e);\r\n        setField2Value(\"NA\");\r\n      })\r\n    } else {\r\n      setField2Value(\"\");\r\n    }\r\n  }, [field1Value, coin1.address, coin2.address]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log('props: ', props);\r\n      console.log(\"Checking balances...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => setReserves(data));\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        props={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n        />\r\n\r\n      {/* Coin Swapper */}\r\n      <Container  maxWidth=\"xs\">\r\n        <Paper class=\"Container\"  className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n          \r\n          </Typography>\r\n\r\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field1Value}\r\n                \r\n                onClick={() => setDialog1Open(true)}\r\n                onChange={handleChange.field1}\r\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n              />\r\n            </Grid> <p id='bal1'> Balance {formatBalance(coin1.balance,coin1.symbol)}\r\n   </p>\r\n\r\n            <IconButton onClick={switchFields} className={classes.switchButton}>\r\n              <SwapVerticalCircleIcon id='sicon' fontSize=\"medium\" />\r\n            </IconButton>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={false}\r\n                value={field2Value}\r\n                onClick={() => setDialog2Open(true)}\r\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n           <p id='bal2'> Balance {formatBalance(coin2.balance , coin2.symbol)}\r\n</p>\r\n\r\n\r\n            <LoadingButton id='lbt'\r\n              loading={loading}\r\n              valid={isButtonEnabled()}\r\n              success={false}\r\n              fail={false}\r\n              onClick={swap}\r\n            >\r\n              <LoopIcon />\r\n              Approve And Swap\r\n            </LoadingButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n       \r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinSwapper;","import React from \"react\";\r\nimport { ButtonGroup, Button } from \"@material-ui/core\";\r\nimport '../font.css';\r\nimport './switch.css';\r\nexport default function SwitchButton(props) {\r\n  const { setDeploy } = props;\r\n\r\n  const changeStyles = (K) => {\r\n    if (K === true) {\r\n      let add_button = document.getElementById(\"add-button\");\r\n      add_button.style.backgroundColor = \"#333333\";\r\n      add_button.style.color = \"#eeeeee\";\r\n\r\n      let remove_button = document.getElementById(\"remove-button\");\r\n      remove_button.style.backgroundColor = \"#eeeeee\";\r\n      remove_button.style.color = \"#333333\";\r\n    } else {\r\n      let remove_button = document.getElementById(\"remove-button\");\r\n      remove_button.style.backgroundColor = \"#333333\";\r\n      remove_button.style.color = \"#eeeeee\";\r\n\r\n      let add_button = document.getElementById(\"add-button\");\r\n      add_button.style.backgroundColor = \"#eeeeee\";\r\n      add_button.style.color = \"#333333\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ButtonGroup size=\"small\" variant=\"contained\">\r\n        <Button\r\n          id=\"add-button\"\r\n          color=\"primary\"\r\n          text=\"white\"\r\n          onClick={() => {\r\n            setDeploy(true);\r\n            changeStyles(true);\r\n          }}\r\n        >\r\n         <p> Add<span>  <span></span></span> </p>\r\n        </Button>\r\n\r\n        <Button\r\n          id=\"remove-button\"\r\n          color=\"secondary\"\r\n          text=\"white\"\r\n          onClick={() => {\r\n            setDeploy(false);\r\n            changeStyles(false);\r\n          }}\r\n        >\r\n         <p> Remove </p>\r\n        </Button>\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n","import { Contract, ethers } from \"ethers\";\r\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\r\n\r\nconst ERC20 = require(\"../build/ERC20.json\");\r\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\r\n\r\n// Function used to add Liquidity to any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\r\n//    `amount1` - A float or similar number representing the value of address1's coin to add\r\n//    `amount2` - A float or similar number representing the value of address2's coin to add\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function addLiquidity(\r\n  address1,\r\n  address2,\r\n  amount1,\r\n  amount2,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\r\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  await token1.approve(routerContract.address, amountIn1);\r\n  await token2.approve(routerContract.address, amountIn2);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    amountIn1,\r\n    amountIn2,\r\n    amount1Min,\r\n    amount2Min,\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.addLiquidityETH(\r\n      address2,\r\n      amountIn2,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn1 }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.addLiquidityETH(\r\n      address1,\r\n      amountIn1,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn2 }\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.addLiquidity(\r\n      address1,\r\n      address2,\r\n      amountIn1,\r\n      amountIn2,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n// Function used to remove Liquidity from any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function removeLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity_tokens,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer,\r\n  factory\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const Getliquidity = (liquidity_tokens)=>{\r\n    if (liquidity_tokens < 0.001){\r\n      return ethers.BigNumber.from(liquidity_tokens*10**18);\r\n    }\r\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\r\n  }\r\n\r\n  const liquidity = Getliquidity(liquidity_tokens);\r\n  console.log('liquidity: ', liquidity);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  await pair.approve(routerContract.address, liquidity);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(liquidity),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.removeLiquidityETH(\r\n      address2,\r\n      liquidity,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.removeLiquidityETH(\r\n      address1,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.removeLiquidity(\r\n      address1,\r\n      address2,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\nconst quote = (amount1, reserve1, reserve2) => {\r\n  const amount2 = amount1 * (reserve2 / reserve1);\r\n  return [amount2];\r\n};\r\n\r\n// Function used to get a quote of the liquidity addition\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\r\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nasync function quoteMintLiquidity(\r\n  address1,\r\n  address2,\r\n  amountA,\r\n  amountB,\r\n  factory,\r\n  signer\r\n){\r\n  const MINIMUM_LIQUIDITY = 1000;\r\n  let _reserveA = 0;\r\n  let _reserveB = 0;\r\n  let totalSupply = 0;\r\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n      const reserveA = reservesRaw[0];\r\n      const reserveB = reservesRaw[1];\r\n    \r\n      const _totalSupply = await pair.totalSupply();\r\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n      return [reserveA, reserveB, totalSupply]\r\n    } else {\r\n      return [0,0,0]\r\n    }\r\n  });\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  // Need to do all this decimals work to account for 0 decimal numbers\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const valueA = amountA*(10**token1Decimals);\r\n  const valueB = amountB*(10**token2Decimals);\r\n\r\n  const reserveA = _reserveA*(10**token1Decimals);\r\n  const reserveB = _reserveB*(10**token2Decimals);\r\n\r\n  if (totalSupply == 0){\r\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\r\n  };\r\n  \r\n  return (\r\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\r\n  );\r\n};\r\n\r\nexport async function quoteAddLiquidity(\r\n  address1,\r\n  address2,\r\n  amountADesired,\r\n  amountBDesired,\r\n  factory,\r\n  signer\r\n) {\r\n\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  if (reserveA === 0 && reserveB === 0) {\r\n    const amountOut = await quoteMintLiquidity(\r\n      address1,\r\n      address2,\r\n      amountADesired,\r\n      amountBDesired,\r\n      factory,\r\n      signer);\r\n    return [\r\n      amountADesired,\r\n      amountBDesired,\r\n      amountOut.toPrecision(8),\r\n    ];\r\n  } else {\r\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\r\n    if (amountBOptimal <= amountBDesired) {\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountADesired,\r\n        amountBOptimal,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountADesired,\r\n        amountBOptimal,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    } else {\r\n      const amountAOptimal = quote(\r\n        amountBDesired,\r\n        reserveB,\r\n        reserveA\r\n      );\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\n// Function used to get a quote of the liquidity removal\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteRemoveLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  console.log(\"pair address\", pairAddress);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  const feeOn =\r\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\r\n\r\n  const _kLast = await pair.kLast();\r\n  const kLast = Number(ethers.utils.formatEther(_kLast));\r\n\r\n  const _totalSupply = await pair.totalSupply();\r\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n\r\n  if (feeOn && kLast > 0) {\r\n    const feeLiquidity =\r\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\r\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\r\n    totalSupply = totalSupply + feeLiquidity;\r\n  }\r\n\r\n  const Aout = (reserveA * liquidity) / totalSupply;\r\n  const Bout = (reserveB * liquidity) / totalSupply;\r\n\r\n  return [liquidity, Aout, Bout];\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getBalanceAndSymbol,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport '../font.css';\r\nimport './liquiditydeployer.css';\r\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\r\n\r\nimport CoinField from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\n\r\nconst styles = (theme) => ({\r\n /*paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"#f0f0f0\",\r\n    color: \"white\",\r\n  },*/\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n    marginBottom:\"20px\",\r\n    \r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(2),\r\n    padding: theme.spacing(0.4),\r\n    \r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityDeployer(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the user's balance of liquidity tokens for the current pair\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Used when getting a quote of liquidity\r\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    let oldField1Value = field1Value;\r\n    let oldField2Value = field2Value;\r\n\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(oldField2Value);\r\n    setField2Value(oldField1Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n    field2: (e) => {\r\n      setField2Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(4) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return parseFloat(reserve).toPrecision(3)+ \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      parsedInput1 !== NaN &&\r\n      0 < parsedInput1 &&\r\n      parsedInput2 !== NaN &&\r\n      0 < parsedInput2 &&\r\n      parsedInput1 <= coin1.balance &&\r\n      parsedInput2 <= coin2.balance\r\n    );\r\n  };\r\n\r\n\r\n\r\n  const deploy = () => {\r\n    console.log(\"Attempting to deploy liquidity...\");\r\n    setLoading(true);\r\n\r\n    addLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      field2Value,\r\n      '0',\r\n      '0',\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        setField2Value(\"\");\r\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(\r\n        props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && props.network.account) {\r\n      getReserves(\r\n        coin1.address,\r\n        coin2.address,\r\n        props.network.factory,\r\n        props.network.signer,\r\n        props.network.account\r\n        ).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity deployment.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity deployment\");\r\n\r\n      quoteAddLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        field1Value,\r\n        field2Value,\r\n        props.network.factory,\r\n        props.network.signer\r\n      ).then((data) => {\r\n        // console.log(data);\r\n        console.log(\"TokenA in: \", data[0]);\r\n        console.log(\"TokenB in: \", data[1]);\r\n        console.log(\"Liquidity out: \", data[2]);\r\n        setLiquidityOut([data[0], data[1], data[2]]);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div id=\"box\">\r\n      {/* Liquidity deployer */}\r\n      <Typography variant=\"h5\" className={classes.title}></Typography>\r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.networksigner}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n      />\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <CoinField\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : <span>Select</span>}\r\n          />\r\n        </Grid>\r\n        <p id='bal1'> Balance {formatBalance(coin1.balance,coin1.symbol)}\r\n   </p>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <CoinField\r\n            activeField={true}\r\n            value={field2Value}\r\n            onClick={() => setDialog2Open(true)}\r\n            onChange={handleChange.field2}\r\n            symbol={coin2.symbol !== undefined ? coin2.symbol : <span>Select</span>}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={4}\r\n        className={classes.balance}\r\n      >   <p id='bal2'> Balance {formatBalance(coin2.balance,coin2.symbol)}\r\n      </p>\r\n      <hr id=\"hrr\"></hr>\r\n        <hr className={classes.hr} />\r\n\r\n        \r\n        <Grid\r\n          container\r\n          item\r\n          className={classes.values}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          {/*Reserves display*/ }\r\n          <p id =\"lbal\">Your Liquidty Pool Balance  :    {formatReserve(liquidityTokens, \"UNI-V2\")}</p>\r\n         <h5 id=\"heading\">Pair Reserves </h5>\r\n         <span id=\"c1res\">{formatReserve(reserves[0], coin1.symbol)}</span>\r\n         <span id=\"c2res\">{formatReserve(reserves[1], coin2.symbol)}</span>\r\n\r\n         \r\n         \r\n         \r\n\r\n        \r\n\r\n         \r\n        </Grid>\r\n        \r\n      <p id=\"tadd1\">Tokens1 to Add  {formatBalance(liquidityOut[0], coin1.symbol)} </p>\r\n       <p id=\"tadd2\">tokens2 to add {formatBalance(liquidityOut[1], coin2.symbol)}</p>\r\n       <p id=\"ltget\">Liquidity tokens In  :  {formatReserve(liquidityOut[2],\"SHX Lp\" )}</p>\r\n       \r\n        \r\n\r\n     \r\n      </Grid>\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n       \r\n       \r\n       \r\n       \r\n       <p></p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n       <p><p><p></p></p><p><p></p></p></p><p>\r\n\r\n\r\n\r\n<hr></hr>\r\n       </p>\r\n        <LoadingButton id=\"b\"\r\n          loading={loading}\r\n          valid={isButtonEnabled()}\r\n          success={false}\r\n          fail={false}\r\n          onClick={deploy}\r\n        >\r\n          <AccountBalanceIcon className={classes.buttonIcon} />\r\n         <span id='p'>Provide</span> \r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityDeployer;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getBalanceAndSymbol,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\r\nimport {\r\n  RemoveLiquidityField1,\r\n  RemoveLiquidityField2,\r\n} from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport '../font.css';\r\nimport './rml.css';\r\nconst styles = (theme) => ({\r\n  /*paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },*/\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityRemover(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the liquidity tokens balance of the user\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Stores the input and output for the liquidity removal preview\r\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(4) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return parseFloat(reserve).toPrecision(4) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    const parsedInput = parseFloat(field1Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      parsedInput !== NaN &&\r\n      0 < parsedInput &&\r\n      parsedInput <= liquidityTokens\r\n    );\r\n  };\r\n\r\n  const remove = () => {\r\n    console.log(\"Attempting to remove liquidity...\");\r\n    setLoading(true);\r\n\r\n    removeLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      0,\r\n      0,\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer,\r\n      props.network.factory\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(\r\n        props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account,\r\n        address,\r\n        props.network.provider,\r\n        props.network.signer,\r\n        props.network.weth.address,\r\n        props.network.coins\r\n        ).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && props.network.account) {\r\n      getReserves(\r\n        coin1.address,\r\n        coin2.address,\r\n        props.network.factory,\r\n        props.network.signer,\r\n        props.network.account).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity removal.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity removal\");\r\n      quoteRemoveLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        field1Value,\r\n        props.network.factory,\r\n        props.network.signer\r\n      ).then((data) => {\r\n        setTokensOut(data);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, props.network.factory, props.network.signer]);\r\n\r\n  useEffect(() => {\r\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address, props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div id=\"box\">\r\n      {/* Coin Swapper */}\r\n      \r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n      />\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField1\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : <span>Select</span>}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField2\r\n            activeField={true}\r\n            onClick={() => setDialog2Open(true)}\r\n            symbol={coin2.symbol !== undefined ? coin2.symbol :<span>Select</span> }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={4}\r\n        className={classes.balance}\r\n      >\r\n        <hr className={classes.hr} />\r\n        <Grid\r\n          container\r\n          item\r\n          className={classes.values}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n\r\n        </Grid>\r\n        <p id=\"lbal2\">LP Token Balance  : {formatReserve(liquidityTokens, \"SHXLP\")}</p>\r\n        <p id=\"res1\">Res1 {formatReserve(reserves[0], coin1.symbol)} </p>\r\n        <p id=\"res2\">Res 2{formatReserve(reserves[1], coin2.symbol)} </p>\r\n        <p id=\"rem\">  Pool Tokens Removing  :   {formatBalance(tokensOut[0], \"UNI-V2\")}</p>\r\n        <p id=\"head\">Tokens Out</p>\r\n        <p id=\"out1\">{formatBalance(tokensOut[1], coin1.symbol)}</p>\r\n        <p id=\"out2\">{formatBalance(tokensOut[2], coin2.symbol)}</p>\r\n        \r\n        <hr className={classes.hr} />\r\n      </Grid>\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={isButtonEnabled()}\r\n          success={false}\r\n          fail={false}\r\n          onClick={remove}\r\n        >\r\n          <ArrowDownwardIcon className={classes.buttonIcon} />\r\n          Remove\r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityRemover;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport SwitchButton from \"./SwitchButton\";\r\nimport LiquidityDeployer from \"./LiquidityDeployer\";\r\nimport LiquidityRemover from \"./RemoveLiquidity\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 400,\r\n    marginTop:\"40px\",\r\n    margin: \"auto\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(1),\r\n    marginBottom: theme.spacing(.1),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction Liquidity(props) {\r\n  const classes = useStyles();\r\n\r\n  const [deploy, setDeploy] = React.useState(true);\r\n\r\n  const deploy_or_remove = (deploy) => {\r\n    if (deploy === true) {\r\n      return <LiquidityDeployer network={props.network}/>;\r\n    }\r\n    return <LiquidityRemover network={props.network}/>;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            <SwitchButton setDeploy={setDeploy} />\r\n          </Typography>\r\n\r\n          {deploy_or_remove(deploy)}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        \r\n        \r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Liquidity;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { ethers } from \"ethers\";\r\nimport Web3Provider from \"./network\";\r\nimport NarBar from \"./NavBar/NavBar\";\r\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport Liquidity from \"./Liquidity/Liquidity\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#000000\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    secondary: {\r\n      main: \"#9e9e9e\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <SnackbarProvider maxSnack={3}>\r\n        <ThemeProvider theme={theme}>\r\n          <Web3Provider\r\n            render={(network) => (\r\n              <div>\r\n                <NarBar />\r\n                <Route exact path=\"/\">\r\n                  <CoinSwapper network={network} />\r\n                </Route>\r\n                \r\n\r\n                <Route exact path=\"/Liquidity\">\r\n                  <Liquidity network={network} />\r\n                </Route>\r\n              </div>\r\n            )}\r\n          ></Web3Provider>\r\n        </ThemeProvider>\r\n      </SnackbarProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}